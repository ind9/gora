/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.gora.mapreduce;

import org.apache.avro.Schema;
import org.apache.avro.io.Decoder;
import org.apache.avro.io.DecoderFactory;
import org.apache.avro.io.ResolvingDecoder;

import java.io.IOException;

/**
 * Avro uses a ResolvingDecoder which resolves two schemas and converts records
 * written by one to the other, and validates the input. However, Gora needs to
 * write extra information along with the data, so the validation is not consistent
 * with the grammer generated by Avro. So we need to fake the ResolvingDecoder (which
 * is sadly hard codec into GenericDatumReader) until we can write our own GrammerGenerator
 * extending ResolvingGrammerGenerator of avro.
 *
 * Update: I am not faking anything here, to see how well this works out
 */
public class FakeResolvingDecoder {

    private final ResolvingDecoder resolvingDecoder;

    public FakeResolvingDecoder(Schema schema, Decoder in) throws IOException {
        resolvingDecoder = DecoderFactory.get().resolvingDecoder(schema, schema, in);
    }

    public ResolvingDecoder get() {
        return resolvingDecoder;
    }
}
